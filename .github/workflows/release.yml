name: Release

on:
  push:
    tags:
      - 'v*'

env:
  DEBUG: napi:*
  APP_NAME: cronflow
  MACOSX_DEPLOYMENT_TARGET: '10.13'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
            build: |
              cd core
              npm install
              npx napi build --platform --release --target x86_64-apple-darwin
              strip -x *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            build: |
              cd core
              npm install
              npx napi build --platform --release --target aarch64-apple-darwin
              strip -x *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: |
              set -e
              rustup update stable
              rustup default stable
              cd core
              npm install
              npx napi build --platform --release --target x86_64-unknown-linux-gnu
              strip *.node
          - host: ubuntu-latest
            target: x86_64-unknown-linux-musl
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: |
              set -e
              cd core
              npm install
              npx napi build --platform --release --target x86_64-unknown-linux-musl
              strip *.node
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: |
              set -e
              rustup update stable
              rustup default stable
              cd core
              npm install
              npx napi build --platform --release --target aarch64-unknown-linux-gnu
              aarch64-unknown-linux-gnu-strip *.node
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: |
              cd core
              npm install
              npx napi build --platform --release --target x86_64-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
            build: |
              cd core
              npm install
              npx napi build --platform --release --target aarch64-pc-windows-msvc

    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: '--user 0:0 -v ${{ github.workspace }}:/build -w /build'
          run: ${{ matrix.settings.build }}

      - name: Build
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: core/*.node
          if-no-files-found: error

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install dependencies for publishing
        run: |
          cd core
          npm install

      - name: Create platform packages
        run: |
          # Map artifact names to NAPI platform names
          declare -A platform_map=(
            ["bindings-x86_64-apple-darwin"]="darwin-x64"
            ["bindings-aarch64-apple-darwin"]="darwin-arm64"
            ["bindings-x86_64-pc-windows-msvc"]="win32-x64-msvc"
            ["bindings-aarch64-pc-windows-msvc"]="win32-arm64-msvc"
            ["bindings-x86_64-unknown-linux-gnu"]="linux-x64-gnu"
            ["bindings-x86_64-unknown-linux-musl"]="linux-x64-musl"
            ["bindings-aarch64-unknown-linux-gnu"]="linux-arm64-gnu"
          )

          # Process each artifact
          for artifact_dir in artifacts/bindings-*; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              platform_name="${platform_map[$artifact_name]}"
              
              if [ -n "$platform_name" ]; then
                echo "Creating package for $platform_name..."
                
                # Create package directory
                pkg_dir="core/npm/@cronflow/$platform_name"
                mkdir -p "$pkg_dir"
                
                # Copy binary
                if ls "$artifact_dir"/*.node 1> /dev/null 2>&1; then
                  cp "$artifact_dir"/*.node "$pkg_dir/core.$platform_name.node"
                  echo "✅ Binary copied"
                fi
                
                # Create package.json
                cat > "$pkg_dir/package.json" << EOF
          {
            "name": "@cronflow/$platform_name",
            "version": "0.10.0",
            "description": "Cronflow native bindings for $platform_name",
            "main": "core.$platform_name.node",
            "license": "Apache-2.0",
            "os": ["$(echo $platform_name | cut -d- -f1)"],
            "cpu": ["$(echo $platform_name | cut -d- -f2)"],
            "repository": {
              "type": "git",
              "url": "https://github.com/dali-benothmen/cronflow.git"
            },
            "engines": {
              "node": ">= 20"
            }
          }
          EOF
                
                # Create README.md
                cat > "$pkg_dir/README.md" << EOF
          # @cronflow/$platform_name

          Native bindings for Cronflow on $platform_name.

          This package is automatically installed as an optional dependency when you install \`cronflow\`.
          You typically don't need to install this package directly.
          EOF
                
                echo "✅ Package created at $pkg_dir"
              fi
            fi
          done

          echo ""
          echo "Platform packages created:"
          ls -la core/npm/@cronflow/
        shell: bash

      - name: Publish platform packages
        run: |
          cd core
          echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" >> ~/.npmrc

          for pkg in npm/@cronflow/*; do
            if [ -d "$pkg" ]; then
              echo "Publishing $pkg..."
              cd "$pkg"
              npm publish --access public || echo "⚠️ Failed to publish $pkg"
              cd /home/runner/work/cronflow/cronflow/core
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Setup Bun for main package build
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install main package dependencies
        run: npm install --omit=optional

      - name: Build main package
        run: npm run build:prod

      - name: Publish main package
        run: |
          echo "//registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN" >> ~/.npmrc
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
